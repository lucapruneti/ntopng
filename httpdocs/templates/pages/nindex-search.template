{#
    (C) 2021 - ntop.org    
#}

<script type='text/javascript' src='/js/widgets/widgets.js?{{ ntop.getStaticFileEpoch() }}'></script>

<div class='row'>
    <div class='col-12'>
        <div class="mb-2">
            {* ui_utils.render_datetime_range_picker(range_picker) *}
        </div>
    </div>
    <!-- 
    <div class="col-12">
        <div class="card card-shadow mt-2">
	    <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100">
                <div class="text-center">
            	    <div class="spinner-border text-primary" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="card-body">{* chart.html *}</div>
        </div>
    </div>
    -->
    <div class='col-12'>
        <div class="card card-shadow">
	    <div class="overlay justify-content-center align-items-center position-absolute h-100 w-100">
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                          <span class="sr-only">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <table id='{{ datatable.name }}' class='table table-striped table-bordered w-100'> 
                    <thead>
                        <tr>
                            {% for _, column in ipairs(datatable.columns) do %}
                                <th>{{ column }}</th>
                            {% end %}
                        </tr>
                    </thead>
                </table>
                <small id="{{ datatable.name }}-query" style="display: none;" class="query">{{ i18n('nindex.query_performed') }} <span class="seconds">{}</span> seconds.</small>
            </div>
            <div class="card-footer">
                <button id="btn-get-permalink" class="btn btn-secondary">
                    <i class="fas fa-link"></i> {{ i18n('graphs.get_permanent_link') }}
                </button>
                <a id="btn-download-records" class="btn btn-secondary" href="{{ ntop.getHttpPrefix() }}/lua/enterprise/live_flows_extraction.lua{{ build_query_params(datatable.datasource.params) }}">
                    <i class="fas fa-file-download"></i> {{ i18n('graphs.download_records') }}
                </a>
            </div>
        </div>
    </div>
</div>

{% if datatable.modals then %}
<div class="modals">
    {% for _, modal in ipairs(datatable.modals) do %}
        {* modal *}
    {% end %}
</div>
{% end %}

<link href="{{ ntop.getHttpPrefix() }}/css/dataTables.bootstrap5.min.css" rel="stylesheet"/>
<script type="text/javascript">
    i18n.showing_x_to_y_rows = "{{ i18n('showing_x_to_y_rows', {x='_START_', y='_END_', tot='_TOTAL_'}) }}";
</script>
<script type='text/javascript'>
    $(document).ready(function(){

        const INITIAL_ROWS_LENGTH = {{datatable.initialLength}};
        // const chart = WidgetUtils.getWidgetByName("{{ chart.name }}");
        const datasourceParams = {* json.encode(datatable.datasource.params) *};

        const $inputBeginEpoch = $(`#begin-epoch`);
        const $inputEndEpoch = $(`#end-epoch`);
        const $btnGetPermaLink = $(`#btn-get-permalink`);

	    /* Show an overlay to hide loading */
        function toggleOverlays(time = 500) {
            $(`.overlay`).toggle(time);
        }

        function showOverlays(time = 500) {
            $(`.overlay`).fadeIn(time);
        }

        function hideOverlays(time = 500) {
            $(`.overlay`).fadeOut(time);
        }

        async function reloadChartAndTable($table, begin, end) {

            if (begin == null && end == null) return;

            const copyParams = Object.assign(datasourceParams, {});

            // override the existing timestamps 
            if (copyParams.begin_epoch) {
                copyParams.begin_epoch = begin.unix();
            }
            if (copyParams.end_epoch) {
                copyParams.end_epoch = end.unix();
            }

            const searchParams = new URLSearchParams(Object.entries(copyParams));

	        toggleOverlays();
	    
            // reload the table
            $table.ajax.url(`{* datatable.datasource.name *}?${searchParams.toString()}`).load();
            // reload the chart
            // await chart.update(copyParams);
        }

        function printQueryTime($table) {
            const response = $table.ajax.json();
            // if the response contains the query time period
            if (response.rsp.stats !== undefined) {
                const msec = response.rsp.stats.query_duration_msec / 1000.0;
                $(`#{{ datatable.name }}-query`).show();
                $(`#{{ datatable.name }}-query .seconds`).text((msec < 0.001) ? '< 0.001' : msec); // The time is in msec
            }
        }

        function getTimestampRange() {
            const begin = $(`#begin-epoch`).datetimepicker('date');
            const end = $(`#end-epoch`).datetimepicker('date');
            return [begin, end];
        }

        function pushNewHistoryState(begin, end, len) {
            
            const url = new URL(location);
            const searchParams = new URLSearchParams();

            searchParams.set('begin_epoch', begin.unix());
            searchParams.set('end_epoch', end.unix());

            // get all filters tags
            const tags = tagify.getTagElms();

            // add the tag filters inside the search params object
            for (const tag of tags) {

                const tagData = tagify.tagData(tag);
                const {key, selectedOperator, realValue, value} = tagData;
                searchParams.set(key, `${realValue || value},${selectedOperator}`);
            }

            url.search = searchParams.toString();
            window.history.pushState({begin_epoch: begin.unix(), end_epoch: end.unix()}, '', url);
        }

        function getVisibleColumns($tableApi) {

            const visibleColumns = [];
            $tableApi.columns().every(function(idx) {   
                const $column = $tableApi.column(idx);
                if ($column.visible() && $column.name() !== '') {
                    visibleColumns.push($column.name());
                } 
            });

            return visibleColumns;
        }

        function updateDownloadButton() {
            // update the link of the download button
            const href = $(`#btn-download-records`).attr('href');
            const newDownloadURL = new URL(href, location.origin);
            newDownloadURL.search = new URLSearchParams(datasourceParams); 
            newDownloadURL.searchParams.set("visible_columns", getVisibleColumns($table).join(','));
            $(`#btn-download-records`).attr('href', newDownloadURL.toString());
        }

        async function onRangePickerChange(pushHistroy = false) {
            
            const [begin, end] = getTimestampRange();
            await reloadChartAndTable($table, begin, end);

            updateDownloadButton();
    
            if (pushHistroy) {
                pushNewHistoryState(begin, end);
            }

        }
        
        const datatableButton = {* (datatable.buttons or '[]') *};
        datatableButton.push({
            text: '<i class="fas fa-sync"></i>',
            action: async function (e, dt, node, config) {
                await onRangePickerChange();
            }
        });

        let config = DataTableUtils.getStdDatatableConfig(datatableButton);
        config = DataTableUtils.extendConfig(config, {
	        serverSide: true,
            ordering: false,
            searching: false,
            info: false,
            pagingType: 'full',
            ajax: {
                method: 'get',
                url: '{* datatable.datasource.endpoint *}',
                dataSrc: 'rsp.records',
                data: (data, settings) => {

                    const tableApi = settings.oInstance.api();
                
                    if (data.columns !== undefined) {
                        delete data.columns;
                    }

                    data.visible_columns = getVisibleColumns(tableApi).join(',');

                    return data;
                }
            },
            drawCallback: () => {
                // remove fast forward button from the table
                $("#ndpi_table_last").remove();

                updateDownloadButton();
            },
            lengthMenu: [[INITIAL_ROWS_LENGTH, 50, 250, 500, 1000], [INITIAL_ROWS_LENGTH, 50, 250, 500, 1000]],
            {% if datatable.js_columns then %}
                columns: {* datatable.js_columns *}
            {% end %}
        });

        const $table = $(`#{{ datatable.name }}`).DataTable(config);
        DataTableUtils.addToggleColumnsDropdown($table, function(col, visible) {
            $table.ajax.reload();
        });

        // on ajax request complete then print the query time
        $table.on('xhr', function() {
            printQueryTime($table);
            hideOverlays();
	    });

        // on apply button click
        $(`.range-picker`).on('change', async function(e) {
            await onRangePickerChange(true);
        });

        $(`#select-len`).on('change', async function() {
            await onRangePickerChange(true);
        });

        // when an user remove the tag
        tagify.on('remove', async function(e) {

            const key = e.detail.data.key;

            if (datasourceParams[key] !== undefined) {
                delete datasourceParams[key];
            }

            await onRangePickerChange(true);
        });

        tagify.on('add', async function(e) {

            const detail = e.detail;
            if (detail.data === undefined) { return; }

            const tag = detail.data;
            // add/update datasource params, default operator `=`
            datasourceParams[tag.key] = `${tag.realValue || tag.value},eq`;
            // trigger request
            await onRangePickerChange(true);
        });

        tagify.on('edit:updated', async function(e) {

            const detail = e.detail;
            if (detail.data === undefined) { return; }

            const tag = detail.data;
            const prevTag = detail.previousData;

            tag.realValue = tag.value;

            // add/update datasource params, default operator `=`
            datasourceParams[tag.key] = `${tag.value},${prevTag.selectedOperator}`;

            // trigger request
            await onRangePickerChange(true);
        });

        $(`tags`).on('change', 'select.operator', async function(e) {
            
            // update the tag and the operator
            const $tag = $(this).parents('tag');
            const tagData = tagify.tagData($tag[0]);
            const selectedOperator = $(this).val();

            $tag.attr("selectedoperator", selectedOperator);

            datasourceParams[$tag.attr('key')] = `${tagData.realValue || tagData.value},${selectedOperator}`;
            tagData.selectedOperator = selectedOperator;

            // trigger request
            await onRangePickerChange(true);
        });

	    // clear all the filters on click
        $(".btn-remove-tags").on('click', async function() {

            const tags = tagify.getTagElms();
            for (const tag of tags) {
                const key = tag.getAttribute('key');
                if (datasourceParams[key]) {
                    delete datasourceParams[key];
                }
            }

            tagify.removeAllTags();

            await onRangePickerChange(true);
        });

        $table.on('click', `a.tag-filter`, async function (e) {
            e.preventDefault();

            // the tag key is contained inside the column's name
            const colIndex = $table.cell($(this).parent()).index().column;
            const data = $table.cell($(this).parent()).data();

            const key = $table.column(colIndex).name();
            const label = i18n.tags[key];

            const tag = { label: label, key: key, value: (data.label) ? data.label : data, realValue: (data.value) ? data.value : data };

            // does the tag exist?
            const existingTagElement = tagify.getTagElms().find(htmlTag => htmlTag.getAttribute('key') === tag.key);
            const existingTag = tagify.tagData(existingTagElement);

            if (existingTag !== undefined && existingTag.realValue !== tag.realValue) {
                
                // replace the tag!
                existingTag.value = tag.value;
                existingTag.realValue = tag.realValue;

                tagify.replaceTag(existingTagElement, existingTag);
                // update the datasource params
                datasourceParams[tag.key] = `${tag.realValue},${existingTag.selectedOperator}`;
                await onRangePickerChange(true);

                return;
            } 

            // has the tag an operator object?
            if (!Array.isArray(DEFINED_TAGS[key])) {
                tag.operators = DEFINED_TAGS[key].operators;
            }

            tag.selectedOperator = 'eq';

            // add filter!
            tagify.addTags([tag]);
        });
    
        // when the user navigates using the browser's arrows
        // set the input boxes with their respective values
        $(window).on('popstate', function(e) {
            const {state} = e.originalEvent;
            const {begin_epoch, end_epoch} = state;    
            $inputBeginEpoch.datetimepicker('date', moment(begin_epoch, 'X'));
            $inputEndEpoch.datetimepicker('date', moment(end_epoch, 'X'));
        });

        $btnGetPermaLink.on('click', function() {

            const $this = $(this);
            const dummyInput = document.createElement('input');
            dummyInput.value = location.href;
            document.body.appendChild(dummyInput);
            dummyInput.select();
            // copy the url to the clipboard from the dummy input
            document.execCommand("copy");
            document.body.removeChild(dummyInput);

            $this.attr("title", "Copied!")
                .tooltip("dispose")
                .tooltip()
                .tooltip("show");
        });
});
</script>